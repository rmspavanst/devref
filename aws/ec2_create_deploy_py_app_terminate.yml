---
- name: Create and Terminate AWS EC2 Instance with Python App
  hosts: localhost
  gather_facts: false
  vars:
    aws_access_key: YOUR_ACCESS_KEY
    aws_secret_key: YOUR_SECRET_KEY
    ec2_region: us-east-1
    ec2_instance_type: t2.micro
    ec2_ami: ami-xxxxxxxxxxxxxx  # Specify the desired AMI ID
    ec2_instance_name: MyInstance
    ec2_instance_tags:
      Name: MyInstance
    python_app_file: /path/to/your/app.py

  tasks:
    - name: Create EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ ec2_region }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_ami }}"
        wait: true
        count: 1
        instance_tags: "{{ ec2_instance_tags }}"
        assign_public_ip: true
        instance_name: "{{ ec2_instance_name }}"
      register: ec2_instance

    - name: Wait for EC2 Instance to start
      wait_for:
        host: "{{ item.private_ip }}"
        port: 22
        delay: 10
        timeout: 300
      with_items: "{{ ec2_instance.instances }}"

    - name: Install Python on EC2 Instance
      become: true
      gather_facts: false
      hosts: "{{ ec2_instance.instances[0].private_ip }}"
      tasks:
        - name: Update apt cache
          apt:
            update_cache: yes

        - name: Install Python
          apt:
            name: python
            state: present

    - name: Deploy Python app
      copy:
        src: "{{ python_app_file }}"
        dest: "/home/ubuntu/app.py"
        mode: 0755
        remote_src: true
        become: true
        become_user: ubuntu
      delegate_to: "{{ ec2_instance.instances[0].private_ip }}"

    - name: Sleep for 5 hours
      pause:
        seconds: 18000

    - name: Terminate EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ ec2_region }}"
        instance_ids: "{{ ec2_instance.instances[0].id }}"
        state: absent
...

---
- name: Create and Deploy Python App on AWS EC2 Instance
  hosts: localhost
  gather_facts: false
  vars:
    aws_access_key: YOUR_ACCESS_KEY
    aws_secret_key: YOUR_SECRET_KEY
    ec2_region: us-east-1
    ec2_instance_type: t2.micro
    ec2_ami: ami-xxxxxxxxxxxxxx  # Specify the desired AMI ID
    ec2_instance_name: MyInstance
    ec2_instance_tags:
      Name: MyInstance
    python_app_file: /path/to/your/app.py

  tasks:
    - name: Create EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ ec2_region }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_ami }}"
        wait: true
        count: 1
        instance_tags: "{{ ec2_instance_tags }}"
        assign_public_ip: true
        instance_name: "{{ ec2_instance_name }}"
      register: ec2_instance

    - name: Wait for EC2 Instance to start
      wait_for:
        host: "{{ item.private_ip }}"
        port: 22
        delay: 10
        timeout: 300
      with_items: "{{ ec2_instance.instances }}"

    - name: Install Python on EC2 Instance
      become: true
      gather_facts: false
      hosts: "{{ ec2_instance.instances[0].private_ip }}"
      tasks:
        - name: Update apt cache
          apt:
            update_cache: yes

        - name: Install Python
          apt:
            name: python
            state: present

    - name: Deploy Python app
      copy:
        src: "{{ python_app_file }}"
        dest: "/home/ubuntu/app.py"
        mode: 0755
        remote_src: true
        become: true
        become_user: ubuntu
      delegate_to: "{{ ec2_instance.instances[0].private_ip }}"

    - name: Start Python app
      become: true
      become_user: ubuntu
      command: nohup python3 /home/ubuntu/app.py > /dev/null 2>&1 &

    - name: Wait for Python app to be accessible
      uri:
        url: http://{{ ec2_instance.instances[0].public_ip }}:5000
        return_content: no
        method: GET
      register: response
      until: response.status == 200
      retries: 10
      delay: 10

    - name: Display URL to access Python app
      debug:
        msg: "Access the Python app at http://{{ ec2_instance.instances[0].public_ip }}:5000"

...

---
- name: Create and Configure AWS EC2 Instance with Python App
  hosts: localhost
  gather_facts: false
  vars:
    aws_access_key: YOUR_ACCESS_KEY
    aws_secret_key: YOUR_SECRET_KEY
    ec2_region: us-east-1
    ec2_instance_type: t2.micro
    ec2_ami: ami-xxxxxxxxxxxxxx  # Specify the desired AMI ID
    ec2_instance_name: MyInstance
    ec2_instance_tags:
      Name: MyInstance
    python_app_file: /path/to/your/app.py

  tasks:
    - name: Create EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ ec2_region }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_ami }}"
        wait: true
        count: 1
        instance_tags: "{{ ec2_instance_tags }}"
        assign_public_ip: true
        instance_name: "{{ ec2_instance_name }}"
      register: ec2_instance

    - name: Wait for EC2 Instance to start
      wait_for:
        host: "{{ item.private_ip }}"
        port: 22
        delay: 10
        timeout: 300
      with_items: "{{ ec2_instance.instances }}"

    - name: Install Python on EC2 Instance
      become: true
      gather_facts: false
      hosts: "{{ ec2_instance.instances[0].private_ip }}"
      tasks:
        - name: Update apt cache
          apt:
            update_cache: yes

        - name: Install Python
          apt:
            name: python
            state: present

    - name: Deploy Python app
      copy:
        src: "{{ python_app_file }}"
        dest: "/home/ubuntu/app.py"
        mode: 0755
        remote_src: true
        become: true
        become_user: ubuntu
      delegate_to: "{{ ec2_instance.instances[0].private_ip }}"

    - name: Install and Configure HTTPD
      become: true
      gather_facts: false
      hosts: "{{ ec2_instance.instances[0].private_ip }}"
      tasks:
        - name: Install HTTPD
          yum:
            name: httpd
            state: present

        - name: Start HTTPD service
          service:
            name: httpd
            state: started
            enabled: yes

        - name: Install mod_wsgi
          yum:
            name: mod_wsgi
            state: present

        - name: Configure HTTPD virtual host
          copy:
            content: |
              <VirtualHost *:80>
                ServerName localhost
                WSGIDaemonProcess myapp user=apache group=apache threads=5
                WSGIScriptAlias / /home/ubuntu/app.py

                <Directory /home/ubuntu>
                  WSGIProcessGroup myapp
                  WSGIApplicationGroup %{GLOBAL}
                  Require all granted
                </Directory>
              </VirtualHost>
            dest: /etc/httpd/conf.d/myapp.conf
          notify:
            - Restart HTTPD service

    - name: Sleep for 5 hours
      pause:
        seconds: 18000

    - name: Terminate EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ ec2_region }}"
        instance_ids: "{{ ec2_instance.instances[0].id }}"
        state: absent

  handlers:
    - name: Restart HTTPD service
      service:
        name: httpd
        state: restarted

    - name: Display URL to access the app
      debug:
        msg: "Access your Python app at http://{{ ec2_instance.instances[0].public_ip }}"
