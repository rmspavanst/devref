---
- name: Create EC2 Instance, Install HTTPD, Tomcat, Deploy Java app, and Terminate after 5 hours
  hosts: localhost
  gather_facts: false
  vars:
    aws_access_key: YOUR_ACCESS_KEY
    aws_secret_key: YOUR_SECRET_KEY
    ec2_region: us-east-1
    ec2_instance_type: t2.micro
    ec2_ami: ami-xxxxxxxxxxxxxx  # Specify the desired AMI ID
    ec2_instance_name: MyInstance
    ec2_instance_tags:
      Name: MyInstance
    httpd_service_name: httpd
    tomcat_version: 9.0.41
    tomcat_install_dir: /opt/tomcat
    tomcat_service_name: tomcat
    java_app_war_file: /path/to/your/app.war

  tasks:
    - name: Create EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ ec2_region }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_ami }}"
        wait: true
        count: 1
        instance_tags: "{{ ec2_instance_tags }}"
        assign_public_ip: true
        instance_name: "{{ ec2_instance_name }}"
      register: ec2_instance

    - name: Wait for EC2 Instance to start
      wait_for:
        host: "{{ item.private_ip }}"
        port: 22
        delay: 10
        timeout: 300
      with_items: "{{ ec2_instance.instances }}"

    - name: Install HTTPD
      become: true
      package:
        name: httpd
        state: present

    - name: Start HTTPD service
      service:
        name: "{{ httpd_service_name }}"
        state: started
        enabled: yes

    - name: Install Java
      become: true
      package:
        name: openjdk
        state: present

    - name: Download Tomcat
      become: true
      get_url:
        url: "https://downloads.apache.org/tomcat/tomcat-{{ tomcat_version.split('.')[0] }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"

    - name: Extract Tomcat
      become: true
      unarchive:
        src: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "{{ tomcat_install_dir }}"
        remote_src: true
        extra_opts: "--strip-components=1"

    - name: Start Tomcat service
      become: true
      service:
        name: "{{ tomcat_service_name }}"
        state: started
        enabled: yes

    - name: Deploy Java app
      copy:
        src: "{{ java_app_war_file }}"
        dest: "{{ tomcat_install_dir }}/webapps/ROOT.war"
        remote_src: true
      notify:
        - Restart Tomcat service

    - name: Sleep for 5 hours
      pause:
        seconds: 18000

    - name: Terminate EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ ec2_region



#Clone the Playbook from github run daily 11am

pipeline {
    agent any

    triggers {
        cron('0 11 * * *')
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main',
                    credentialsId: 'your_credentials_id',
                    url: 'https://github.com/your_username/your_repository.git'
            }
        }

        stage('Deploy EC2 Instance and App') {
            steps {
                sh 'ansible-playbook -i localhost, playbook.yml'
            }
        }
    }
}
