# What Is DevOps, Anyway?

Approach to culture, automation, and platform design aiming to provide better business value and responsiveness
Goal: Increase speed and flexibility in delivering new features and services

# Introduction to DevOps and CI/CD
Red Hat DevOps Vision
Red Hat culture is built on openness and transparency
Has worked for more than 25 years
Red Hat has history to guide customers through making DevOps reality
Red Hat is building tools, platforms, infrastructure to support customers throughout DevOps journey

# Developers Care About:
Building applications
Automating tests
Continuous integration
Performance tuning
Debugging

# Operations Cares About:
Deploying applications
Managing applications, infrastructure
Reliability
Security
Compliance

# Deployments
OpenShift deployments provide fine-grained management over applications
    Based on user-defined template called "deployment configuration"
Many different templating forms to fit team’s style
    Examples: Templates, Helm, Kustomize
In response to deployment configuration, deployment system creates replication controller to run application
OpenShift is Kubernetes
    Kubernetes "deployment" ⇐⇒ OpenShift "deployment configuration"
    Kubernetes "ReplicaSet" ⇐⇒ OpenShift "replication controller"


# CI/CD Workflow:

Verifies build integrity/ Validates test results/ Checks integration among multiple systems/ Identifies problems.

# How Is CI Executed?
Can execute CI manually, but usually managed by tool
In DevOps, CI is mandatory and executed by tool
    Tool runs automation scripts created by developers
    Avoids human intervention during CI process

# CI Best Practices
Maintain code repository
Automate build
Make build self-testing
Make sure everyone commits every day
Keep build fast
Test in production clone
Make getting deliverables easy
Make sure everyone can view build results


# OpenShift Enables DevOps
OpenShift provides "configuration in code"
Accomplished via standardized environment, Linux® containers, automated provisioning
Built-in support for Jenkins CI server
Jenkins provides automated testing, deployment of applications to OpenShift environment
Features shorten cycle time from idea to deployed product feature

# Pipelines
Enable you to define entire application life cycle
Support continuous integration/continuous deployment (CI/CD)
Pipeline plug-in built with requirements for flexible, extensible, script-based CI/CD workflow


1. Satisfy the customer : Highest priority by delivering valuable software.
2. Welcome Changes : Harness change for the customer's competitive advantage.
3. Deliver Frequently : Deliver working software frequntly in as short time as possible.
4. Work Together : Business and development must work together throughout the project.
5. Trust and Support: Create a healthy environment thet motivates individuals.
6. Face-to-Face Conversation: F2F conversations are an efficent and effective method to convey information.
7. Working Software: Delivering functional software is the ultimate way to measure progress.
8. Sustainable Development: Establish a repetable and maintainable development pace.
9. Continuous Attention: Right skills and good design to constantly improve the product.
10. Maintain Simplicity: Develop just enough to get the job done for right now.
11. Self-Oranizing Teams: Skilled and motivated team members with decision- making power deliver quality.
12. Reflect and Adjust: At regular intervals, the team tunes and adjusts behavior to become more effective.

Agile Manifesto:
===============

1. Individuals & Interations (Over Processes & Tools)
2. Working Software (Over Comprehensive Documentation)
3. Customer Collaboration (Over Contract Negotiation)
4. Responding to change (Over Following a plan)


Agile Project Management: Concepts
===================================
1. Product Backlog: List ordered by priority of the activities, such as features, changes, fixes that are required by the application.
2. Issues: An issue can be an idea, a user story, discussion, bug... basically a task.
3. Points/Weight: Measures the size/complexity of an issue.
4. Sprint: Period of time in which soecific work has to be completed.

Agile Project Management: Roles
===============================
1. Scrum Master: Serves the team by removing impediments, helping them collaborate and guides the product owner.
2. Produt Owner: Represents or is end user, Owns the backlog and prioritizes items.
3. Development team: Teamthat builds the product through sprints (developers, testers, business analyst)

Agile Project Management: Tools (jira, Asana, Trello, Monday)
===============================
1. Burn down chart: Measure weight to show the remaining work to be don and the progress made.
2. Boards: Organizes the activities to be performed in several columns to track work and progress. These columns can be customized to the project's needs. 

