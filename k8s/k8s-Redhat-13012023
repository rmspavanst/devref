# https://www.linuxtechi.com/how-to-install-kubernetes-cluster-rhel/

# https://www.keitaro.com/2021/09/03/setting-up-a-kubernetes-on-premise-cluster-with-kubeadm/


# NOTE: Steps 1 to 6 should be applied to both the Master and the worker node.

Step 1) Disable swap space

$ sudo swapoff -a


Step 2) Disable SELinux

$ sudo vi /etc/selinux/config

# Change the SELINUX value from enforcing to permissive.

SELINUX=permissive

or 

# Alternatively, you use the sed command as follows.

$ sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config


Step 3) Configure networking in master and worker node

hostnamectl set-hostname k8smaster

$ sudo vi /etc/hosts

10.128.15.228 master-node-k8          // For the Master node
10.128.15.230 worker-node-1-k8       //  For the Worker node

## Save and exit the configuration file. Next, install the traffic control utility package:

$ sudo dnf install -y iproute-tc


Step 4) Allow firewall rules for k8s

# On Master node, allow following ports

$ sudo firewall-cmd --permanent --add-port=6443/tcp
$ sudo firewall-cmd --permanent --add-port=2379-2380/tcp
$ sudo firewall-cmd --permanent --add-port=10250/tcp
$ sudo firewall-cmd --permanent --add-port=10251/tcp
$ sudo firewall-cmd --permanent --add-port=10252/tcp
$ sudo firewall-cmd --reload

# On Worker node, allow following ports,

$ sudo firewall-cmd --permanent --add-port=10250/tcp
$ sudo firewall-cmd --permanent --add-port=30000-32767/tcp                                                 
$ sudo firewall-cmd --reload


Step 5) Install CRI-O container runtime

Kubernetes requires a container runtime for pods to run. Kubernetes 1.23 and later versions require that you install a container runtime that confirms with the Container Runtime Interface.

A Container Runtime is an application that supports running containers. Kubernetes supports the following Container Runtime:


Containerd
CRI-O
Docker Engine
Mirantis Container Runtime


In this guide, we will install CRI-O which is a high-level container runtime. To do so, we need to enable two crucial kernel modules â€“ overlay and br_netfilter modules.

To achieve this, we need to configure the prerequisites as follows:

First, create a modules configuration file for Kubernetes.

sudo vi /etc/modules-load.d/k8s.conf

overlay
br_netfilter

# Then load both modules using the modprobe command.

$ sudo modprobe overlay
$ sudo modprobe br_netfilter

# Next, configure the required sysctl parameters as follows

$ sudo vi /etc/sysctl.d/k8s.conf

Add the following lines:

net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1

# Save the changes and exit. To confirm the changes have been applied, run the command:

$ sudo sysctl --system

# To install CRI-O, set the $VERSION environment variable to match your CRI-O version. For instance, to install CRI-O version 1.21 or 1.26(latest)set the $VERSION as shown:(check version in https://github.com/cri-o/cri-o/releases)

$ export VERSION=1.26

$ sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_8/devel:kubic:libcontainers:stable.repo

$ sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/CentOS_8/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo


# Then use the DNF package manager to install CRI-O:

$ sudo dnf install cri-o

$ sudo systemctl enable cri-o && sudo systemctl start cri-o


Step 6)  Install Kubernetes Packages

$ sudo vi /etc/yum.repos.d/kubernetes.repo

[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl


# Save the changes and exit. Finally, install k8s package as follows.

$ sudo dnf install -y kubelet kubeadm kubectl --disableexcludes=kubernetes


#Once installed, be sure to enable and start Kubelet service.

$ sudo systemctl enable kubelet
$ sudo systemctl start kubelet


Step 7)  Create a Kubernetes cluster

$ sudo kubeadm init --pod-network-cidr=192.168.10.0/16

sudo kubeadm init --config kubeadm-config.yaml --cri-socket=/run/containerd/containerd.sock



$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config


# At the very end of the output, you will be given the command to run on worker nodes to join the cluster. We will come to that later in the next step.

Also, be sure to remove taints from the master node:

kubectl taint nodes --all node-role.kubernetes.io/master-



Step 8)  Install Calico Pod Network Add-on

kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml

kubectl create -f https://docs.projectcalico.org/manifests/custom-resources.yaml

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml



watch kubectl get pods -n calico-system

$ kubectl get nodes
$ kubectl get nodes -o wide
$ kubectl get pods --all-namespaces

$ crictl images
$ crictl ps -a


Step 9) Adding worker node to the cluster


$ sudo kubeadm join 10.128.15.228:6443 --token cqb8vy.iicmmqrb1m8u9cob --discovery-token-ca-cert-hash sha256:79748a56f603e6cc57f67bf90b7db5aebe090107d540d6cc8a8f65b785de7543


$ kubectl get nodes


# To change node label:

kubectl label node <node name> node-role.kubernetes.io/<role name>=<key - (any name)>

kubectl label node k8s-worker1 node-role.kubernetes.io/worker1=worker1

# to remove node label:

kubectl label node k8s-worker1 node-role.kubernetes.io/worker2-










