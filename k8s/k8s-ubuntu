## All Hosts ##

# 1. update the package repository

sudo apt-get update -y

# 2. Install Docker

sudo apt-get install docker.io -y

# 3. Access repos via HTTPS

sudo apt-get install apt-transport-https curl -y

# 4. Add k8s key and repo

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

# 5. Update the package repository and Install K8S components (All hosts):
sudo apt-get update
sudo apt-get install -y kubelet=1.18.1-00 
sudo apt-get install -y kubeadm=1.18.1-00 
sudo apt-get install -y kubectl=1.18.1-00
sudo apt-mark hold kubelet kubeadm kubectl

# 6. Add the hosts entry (All hosts)
sudo apt-get install net-tools
ifconfig
edit the file "/etc/hosts"


# 7. Disable SWAP (All hosts)
free -m
sudo swapoff -a
edit /etc/fstab to remove the swap entry

# 8. Initiate the Cluster(Only on Master node)
sudo kubeadm init --control-plane-endpoint kube-master(ip):6443 --pod-network-cidr 10.10.0.0/16

# 9. Set the kubectl context auth to connect to the cluster(Only on Master node)
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl cluster-info

# 10. Pod Network Addon(Calico) (Only on Master node)
Ref: https://docs.projectcalico.org/getting-started/kubernetes/self-manages-onprem/onpremise
curl https://docs.projectcalico.org/manifefests/calico.yaml -O

{{
vi calico.yaml (optional)

- name: CALICO_IPV4POOL_CIDR
  value: "<POD_CIDR>

}}

kubectl apply -f calico.yaml

kubectl get pods -A
kubectl get nodes



# 11. Generate Token to add worker Node(Only on Master node)

# Create a new Token
sudo kubeadm token create

# List Tokens created
sudo kubeadm token list

# Find Certificate Hash on Master
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | 
   openssl rsa -pubin -outform der 2>/dev/null | 
   openssl dgst -sha256 -hex | sed 's/^.* //'

# 12. Join Nodes (Only on Worker nodes)
sudo kubeadm join --token <TOKEN_ID> <CONTROL_PLANE_HOSTNAME:CONTROL_PLANE_PORT> --discovery-token-ca-cert-hash sha256:<HASH>
(Formed using outputs from step 10, treat CAPS as variables to be replaced)

kubectl get nodes

# 13. Want to run workloads on Master?(Only on Master Node)
kubectl taint nodes --all node-role.kubernetes.io/master-

# 14. Sample Deployment file:
=========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
=========================

# 15. Apply the deployment:
kubectl apply -f FILE_NAME

kubectl get deployments -A

