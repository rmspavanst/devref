# Openshift Resouces:
=====================

1. User
2. DeploymentConfig
3. Build
4. ImageStream
5. Route
6. Project
7. Replication Controller
8. BuildConfig
9. Image Stream Tag
10. Template
11. Pod
12. ConfigMap
13. Secret
14. Service
15. Autoscaler (HPA)



Projects:
==========
DeploymentConfig            : Template, ImgeStream, BuildConfig
ReplicationController       : Route, ImageStreamTag, Build
Horizontal Pod Autoscaler   : Service, ConfigMap, Secret, Pod

1. Notes for Hosted OpenShift users
2. Hosted OpenShift Users and Projects

If you are using Hosted OpenShift for this course, there are a couple differences for this projects and users section. You may not be able to follow along with everything, but you should still watch the videos to see how these commands work.

Users:
---------
Your username is your RedHat username. However, Hosted OpenShift does not support username / password login. You'll need to get the token from the web console to log in to Hosted OpenShift.


Projects:
------------
If you try to run oc new-project on Hosted OpenShift, you will get this error from the server:

Error from server (Forbidden): You may not request a new project via this API.

This error comes from a restriction on the Hosted OpenShift environment. Part of the way RedHat manages the free sandbox accounts is by using the project system to limit your resource usage. That means you are restricted to their default projects, <your_user_name>_dev and <your_user_name>_stage.

You can use either one for this course. You'll need to substitute the project name when it comes up in commands. Also, you should run oc delete all --all in between sections to clean up.

You should be able to use oc projects and oc project <your_user_name>_stage to navigate the two projects you do have access to.


Lab: Pods
=========
Instructions


These are the steps you should complete as part of the lab. Labs are open-book. Feel free to examine sources such as the labs project for the course, the cheat sheets, and online documentation to complete these tasks.

In this lab, you will create a custom Pod definition and upload it to OpenShift. This will test your skills in writing and debugging Pod YAML for the OpenShift platform.



First, create a new file under the labs project. The path will be pods/lab-pod.yaml

Copy the pod definition from another source into lab-pod.yaml

Update the MESSAGE environment variable to a custom message. Update the name.

Start a Pod based on lab-pod.yaml on the server

Forward port 8080 from your computer to the running Pod

You can use oc port-forward pod/lab-pod 8080 to do this



Checklist


Once you meet all of these criteria, you have successfully completed the lab. You will need to run the commands yourself in order to grade this lab.



Output from oc get pods contains the pod you uploaded in step 5

Output from oc describe pod/lab-pod has the correct name and MESSAGE environment value

curl localhost:8080 prints the message you entered in step 3


OpenShift 4 DeploymentConfig notes
===================================
This course now supports OpenShift 4 by default. This means that many oc new-app commands use the --as-deployment-config flag. If you try to use this on OpenShift 3, you'll get an error from oc saying that --as-deployment-config is not a valid flag.



If you want to continue in this course using OpenShift 3, you can omit the --as-deployment-config flag from the commands in this course.



How to tell what version of oc you have:

$ oc version
 
# Version 3 will have a line like this
oc v3.11.0+0cbc58b
 
# Version 4 will have a line like this
Client Version: 4.6.1


Here's the difference in the command between versions

# Version 3 to 4.4
$ oc new-app quay.io/practicalopenshift/hello-world
 
# Version 4.5+
$ oc new-app quay.io/practicalopenshift/hello-world --as-deployment-config 


Decployment Config:
--------------------

$ oc new-app https://giturl.com --as-deployment-config
$ oc logs -f dc/hello-world
$ oc status
$ oc describe dc/hello-world
$ oc delete all -l app=hello-world

Replication Controllers:
-------------------------
DeploymentConfig --> ReplicationControllers --> pod/pod/pod....

$ oc new-app quay.io/practicalopenshift/hello-world --as-deplyment-config
$ oc get -o yaml dc/hello-world (o/p: yaml format)
$ oc get rc (to see the replicarion controller)

Roll out & Roll Back:
---------------------

$ oc new-app quay.io/practicalopenshift/hello-world
$ oc get pods --watch -r oc get pods -w
$ oc rollout latest dc/hello-world
$ oc rollback dc/hello-world


Lab: DeploymentConfigs
=========================

Instructions
These are the steps you should complete as part of the lab. Labs are open-book. Feel free to examine sources such as the labs project for the course, the cheat sheets, and online documentation to complete these tasks.

In the DeploymentConfig lab, you will create a custom DeploymentConfig based on the hello-world image by changing some parameters.

First, use oc new-app to start an application based on quay.io/practicalopenshift/hello-world

Use oc new-app to start a second version of the application using the name "lab-dc", a custom value for the MESSAGE environment variable, and the same hello-world image

You can specify environment variables in oc new-app with a flag. oc new-app --help can help you to find the correct one

Forward port 8080 on your local computer to port 8080 on the second pod you created



Checklist
Once you meet all of these criteria, you have successfully completed the lab. You will need to run the commands yourself in order to grade this lab.

Output from oc get pods contains two pods

Output from oc describe dc/lab-dc has the correct name and MESSAGE environment value

curl localhost:8080 prints the message you entered in step 2



Cleaning Up
To clean up, use a single command to delete all of the resources created in step 1. You are done when oc get dc just has the lab-dc DeploymentConfig.




Services:
==============

$ oc explain svc
$ oc explain svc.spec
$ oc create -f pods/pod.yaml
$ oc expose pod/hello-world
$ oc expose --port 8080 pod/hello-world-pod
$ oc create -f pods/pod2.yaml
$ oc rsh hello-world-pod-2 (to open shell on pod2)
    $ wget -qO- ipadd:8080 (in pod)

Access a service uisng environment variables:
---------------------------------------------
env

Route:
==========

1. Exposing a Route

$ oc new-app quay.io/practicalopenshift/hello-world --as-deployment-config
$ oc expose svc/hello-world or service/hello-world
$ oc status
curl <route from oc status>

What is the command to create a service for a pod?
$ oc expose --port <port> <pod-name>


2. Route Definition:

# Get YAML definition
oc get -o yaml route/hello-world


Lab: Networking:
--------------------
Instructions
These are the steps you should complete as part of the lab. Labs are open-book. Feel free to examine sources such as the labs project for the course, the cheat sheets, and online documentation to complete these tasks.

For networking, you'll need to make some modifications to get a route to load balance between two pods.

First, use oc create to start pods/pod.yaml in the labs project

Create a service for this pod

Modify pods/pod2.yaml so that the service will also hit this pod (hint: check the labels section in the pod and selector section in the service)

Use oc create to start pods/pod2.yaml in the labs project

Expose a route for this service


Checklist
Once you meet all of these criteria, you have successfully completed the lab. You will need to run the commands yourself in order to grade this lab.

Output from oc get pods contains two pods

Output from oc status groups the two pods under the same route

When you run curl <your route> several times, it will return messages from both pod.yaml and pod2.yaml

ConfigMaps:
===========

$ oc explain configmap

$ oc create configmap message-map --from-literal Message='Hello From ConfigMap"


